/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "combos.keymap"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
        behaviors {
                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        tapping-term-ms = <500>;
                        quick-tap-ms = <200>;
                        require-prior-idle-ms = <200>;
                        hold-trigger-on-release;
                        hold-trigger-key-positions =  <6 7 8 9 10 \
                                                       18 19 20 21 22 \
                                                       30 31 32 33 34 \
                                                       36 37 38 39 40>;
                };

                hrsl: homerow_shift_left {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        tapping-term-ms = <500>;
                        quick-tap-ms = <200>;
                        hold-trigger-on-release;
                        hold-trigger-key-positions =  <6 7 8 9 10 \
                                                       18 19 20 21 22 \
                                                       30 31 32 33 34 \
                                                       36 37 38 39 40>;
                };

                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        tapping-term-ms = <500>;
                        quick-tap-ms = <200>;
                        require-prior-idle-ms = <200>;
                        hold-trigger-on-release;
                        hold-trigger-key-positions =  <1 2 3 4 5 \
                                                       13 14 15 16 17 \
                                                       25 26 27 28 29 \
                                                       36 37 38 39 40>;
                };

                hrsr: homerow_shift_right {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        tapping-term-ms = <500>;
                        quick-tap-ms = <200>;
                        hold-trigger-on-release;
                        hold-trigger-key-positions =  <1 2 3 4 5 \
                                                       13 14 15 16 17 \
                                                       25 26 27 28 29 \
                                                       36 37 38 39 40>;
                };
                
                marks: question_exclamation {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <2>;
                        bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

        };
};

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };
};

&sk {
        quick-release;
        lazy;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&none  &kp Q  &kp Y        &kp G         &kp U           &kp Z      &marks    &kp L           &kp D         &kp W        &kp V  &none
&none  &kp C  &hml LGUI I  &hml LCTRL O  &hrsl LSHIFT A  &kp COMMA  &kp DOT   &hrsr RSHIFT R  &hmr RCTRL T  &hmr RGUI S  &kp N  &none
&none  &kp B  &kp X        &kp J         &hml LALT K     &kp DQT    &kp SEMI  &hmr RALT H     &kp P         &kp F        &kp P  &none
&kp RET  &lt 1 E  &kp ESC  &lt 2 SPACE  &TAB
                        >;
                };

                nav_layer {
                        bindings = <
&none  &kp C_MUTE    &kp C_PREV    &kp C_PP      &kp C_NEXT  &kp C_STOP  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &K_CMENU  &none
&none  &bt BT_SEL 3  &kp LGUI      &kp LCTRL     &kp LSHFT   &none       &kp H     &kp J      &kp K      &kp L      &kp V     &none
&none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &kp LALT    &BT_CLR     &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp INS   &none
&none  &none  &kp TAB  &kp BSPC  &trans
                        >;
                };

                num_layer {
                        bindings = <
&none  &none   &kp N9  &kp N8  &kp N7  &none     &none  &none               &none             &none            &none      &none
&none  &kp N3  &kp N2  &kp N1  &kp N0  &kp HASH  &none  &hmr RSHIFT DOLLAR  &hmr RCTRL CARET  &hmr RGUI TILDE  &kp GRAVE  &none
&none  &none   &kp N6  &kp N5  &kp N4  &kp AT    &none  &kp RALT            &none             &none            &none      &none
&none  &kp DEL  &kp RET  &none  &none
                        >;
                };

                function_layer {
                        bindings = <
&none  &kp F1          &kp F2           &kp F3      &kp F4     &kp F5        &kp F8  &kp F9     &kp F10    &kp F11   &kp F12  &none
&none  &kp KP_NUMLOCK  &kp LGUI         &kp LCTRL   &kp LSHFT  &kp F6        &kp F7  &kp LSHFT  &kp LCTRL  &kp RGUI  &none    &none
&none  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp PSCRN   &kp LALT   &out OUT_TOG  &none   &kp LALT   &none      &none     &none    &none
&none  &trans  &trans  &trans  &none
                        >;
                };
        };
};
