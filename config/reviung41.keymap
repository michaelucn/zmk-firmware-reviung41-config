/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// Pointer Values
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 400

// Layers
#define ALPHA_L 0
#define NAV_L 1
#define NUM_SYM_L 2
#define MOUSE_L 3
#define MOUSE_FINE_L 4
#define FUNC_L 5

#include "helper.h"
#include "behaviors.dtsi"

#include <behaviors.dtsi>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener {
    fine {
        layers = <MOUSE_FINE_L>;
        input-processors = <&zip_xy_scaler 1 4>; // equivalent to 300
    };
};

COMBO(caps_lock, &caps_word, 16 19, 0)
COMBO(caps_word, &kp CAPSLOCK, 15 20, 0)

COMBO(escape, &kp ESC, 14 15 16, 0)
COMBO(enter, &kp ENTER, 19 20 21, 0)

COMBO(paren_l, &morph_paren_angle_l, 15 16, 0)
COMBO(paren_r, &morph_paren_angle_r, 19 20, 0)

COMBO(bracket_l, &kp LEFT_BRACKET, 27 28, 0)
COMBO(bracket_r, &kp RIGHT_BRACKET, 31 32, 0)

COMBO(star_percent, &morph_star_percent, 3 16, 0)
COMBO(slash, &morph_slash, 19 8, 0)

COMBO(minus, &kp MINUS, 14 15, 0)
COMBO(equal, &kp EQUAL, 20 21, 0)

COMBO(pipe, &kp PIPE, 3 4, 0)
COMBO(hash, &kp HASH, 7 8, 0)

COMBO(ampersand, &kp AMPERSAND, 2 3, 0)
COMBO(dollar, &kp DOLLAR, 8 9, 0)

COMBO(grave_tilde, &kp GRAVE, 26 27, 0)

/ {
        keymap {
                compatible = "zmk,keymap";

                ALPHA_L {
                        bindings = <
&none  &kp F    &kp P        &kp D         &kp L           &kp X   &kp Q      &kp O           &kp U         &kp Y        &kp B  &none
&none  &kp S    &hml LCTRL N  &hml LGUI T  &hmls LSHIFT H  &kp K   &kp COMMA  &hmrs LSHIFT A  &hmr LGUI E  &hmr LCTRL I  &kp C  &none
&none  &marks   &kp W        &kp G         &hml LALT M     &kp J   &kp SEMI   &hmr LALT DOT   &kp Z         &kp SQT      &kp V  &none
&mo MOUSE_L  &lt NAV_L R  &kp TAB  &lt NUM_SYM_L SPACE  &mo FUNC_L
                        >;
                };

                NAV_L {
                        bindings = <
&none  &kp C_MUTE    &kp C_PREV    &kp C_PP      &kp C_NEXT  &kp C_STOP  &kp PG_UP  &kp HOME      &kp UP      &kp END       &kp INS       &none
&none  &kp C_BRI_UP  &kp LCTRL      &kp LGUI     &kp LSHFT   &none       &kp PG_DN  &kp LEFT      &kp DOWN    &kp RIGHT     &kp PSCRN     &none
&none  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_VOL_UP  &kp LALT    &none       &none      &out OUT_TOG  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &none
&none  &none  &none  &kp BSPC  &none
                        >;
                };

                NUM_SYM_L {
                        bindings = <
&none  &none   &kp N6   &kp N5  &kp N4  &none  &none  &none       &none     &none      &none  &none
&none  &kp N0  &kp N3   &kp N2  &kp N1  &none  &none  &kp LSHIFT  &kp LGUI  &kp LCTRL  &none  &none
&none  &none   &kp N9   &kp N8  &kp N7  &none  &none  &kp LALT    &none     &none      &none  &none
&none  &kp DEL  &trans  &none  &none
                        >;
                };

                MOUSE_L {
                        bindings = <
&none  &none  &none     &none      &none      &none  &msc SCRL_UP    &msc SCRL_LEFT   &mmv MOVE_UP    &msc SCRL_RIGHT  &mkp MB2  &none
&none  &none  &kp LCTRL  &kp LGUI  &kp LSHFT  &none  &msc SCRL_DOWN  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB1  &none
&none  &none  &none     &none      &kp LALT   &none  &none           &kp PAUSE_BREAK  &kp KP_NUMLOCK  &kp SCROLLLOCK   &mkp MB3  &none
&none  &none  &none  &mo MOUSE_FINE_L  &none
                        >;
                };

                MOUSE_FINE_L {
                        bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
                        >;
                };

                FUNC_L {
                        bindings = <
&none  &none    &kp F6  &kp F5  &kp F4  &none    &none  &bootloader  &sys_reset  &none     &none  &none
&none  &kp F10  &kp F3  &kp F2  &kp F1  &kp F11  &none  &kp LSHFT    &kp LCTRL   &kp LGUI  &none  &none
&none  &none    &kp F9  &kp F8  &kp F7  &kp F12  &none  &kp LALT     &none       &none     &none  &none
&none  &trans  &trans  &trans  &none
                        >;
                };
        };
};
