/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "combos.keymap"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define RIGHT_KEYS <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 36 37 38 39 40>
#define LEFT_KEYS <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38 39 40>

#define HM(NAME, HOLD_TRIGGER_KEYS, REQUIRED_IDLE)\
        hm##NAME: homerow_mods_##NAME {\
                compatible = "zmk,behavior-hold-tap";\
                #binding-cells = <2>;\
                flavor = "balanced";\
                bindings = <&kp>, <&kp>;\
                tapping-term-ms = <500>;\
                quick-tap-ms = <200>;\
                require-prior-idle-ms = <##REQUIRED_IDLE>;\
                hold-trigger-on-release;\
                hold-trigger-key-positions = ##HOLD_TRIGGER_KEYS;\
        };
/ {
        behaviors {
                HM(l, RIGHT_KEYS, 200)
                HM(ls, RIGHT_KEYS, 0)

                HM(r, LEFT_KEYS, 200)
                HM(rs, LEFT_KEYS, 0)

                marks: question_exclamation {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

        };
};

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&none     &kp COMMA  &kp Y        &kp O         &kp F           &kp SQT    &kp Z   &kp D           &kp C         &kp L        &kp B  &none
&none     &kp U      &hml LGUI I  &hml LCTRL A  &hmls LSHIFT H  &kp Q      &kp X   &hmrs RSHIFT T  &hmr RCTRL S  &hmr RGUI R  &kp N  &none
&none     &kp K      &kp J        &kp DOT       &hml LALT P     &kp SEMI   &marks  &hmr RALT M     &kp G         &kp W        &kp V  &none
&kp none  &lt 1 E    &kp ESC      &lt 2 SPACE   &kp K_LOCK
                        >;
                };

                nav_layer {
                        bindings = <
&none  &kp C_MUTE    &kp C_PREV    &kp C_PP      &kp C_NEXT  &kp C_STOP  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp K_CMENU  &none
&none  &bt BT_SEL 3  &kp LGUI      &kp LCTRL     &kp LSHFT   &none       &kp H     &kp J      &kp K      &kp L      &kp V        &none
&none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &kp LALT    &bt BT_CLR  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp INS      &none
&none  &none         &kp RET       &kp BSPC      &none
                        >;
                };

                num_layer {
                        bindings = <
&none  &none    &kp N6   &kp N5  &kp N4  &none     &none  &none             &none             &none            &none      &none
&none  &none    &kp N3   &kp N2  &kp N1  &kp HASH  &none  &hmr RSHIFT N0    &hmr RCTRL CARET  &hmr RGUI TILDE  &kp GRAVE  &none
&none  &none    &kp N9   &kp N8  &kp N7  &kp AT    &none  &hmr RALT DOLLAR  &none             &none            &none      &none
&none  &kp DEL  &kp TAB  &none   &none
                        >;
                };

                function_layer {
                        bindings = <
&none  &kp F1          &kp F2           &kp F3      &kp F4     &kp F5        &kp F8  &kp F9     &kp F10    &kp F11   &kp F12  &none
&none  &kp KP_NUMLOCK  &kp LGUI         &kp LCTRL   &kp LSHFT  &kp F6        &kp F7  &kp LSHFT  &kp LCTRL  &kp RGUI  &none    &none
&none  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp PSCRN   &kp LALT   &out OUT_TOG  &none   &kp LALT   &none      &none     &none    &none
&none  &trans          &trans           &trans      &none
                        >;
                };
        };
};
